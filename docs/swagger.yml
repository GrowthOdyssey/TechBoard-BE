openapi: 3.0.0

info:
  version: 1.0.0
  title: TechBoard API

tags:
  - name: HealthCheck
    description: ヘルスチェック
  - name: User
    description: ユーザー
  - name: Board
    description: 掲示板
  - name: Article
    description: 記事

servers:
  - url: http://localhost:8080
    description: local server

paths:
  /health_check:
    get:
      tags:
        - HealthCheck
      summary: ヘルスチェック
      description: APIサーバの稼働状況を確認する。
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: ステータス
                    example: OK
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: ステータス
                    example: NG

  /v1/signup:
    post:
      tags:
        - User
      summary: ユーザー登録
      description: ユーザーを登録する。
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/signupRequest"
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/signupResponse"
        422:
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response422"
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response500"

  /v1/login:
    post:
      tags:
        - User
      summary: ユーザーログイン
      description: ユーザーログインを行う。
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/loginRequest"
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/loginResponse"
        422:
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response422"
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response500"
  
  /v1/articles:
    get:
      tags:
        - Article
      summary: 記事一覧取得
      description: 記事一覧を取得する
      parameters:
        - name: page
          in: query
          required: true
          schema:
            type: integer
            description: ページ番号
            example: 1
        - name: perPage
          in: query
          required: true
          schema:
            type: integer
            description: 1ページあたりの件数
            example: 20
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/articlesListGetResponse"
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response400"
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response500"

    post:
      tags:
        - Article
      summary: 記事作成
      description: 記事を作成する。
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/articlesPostRequest"
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/articlesPostResponse"
        422:
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response422"
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response500"

  /v1/articles/{articleId}:
    get:
      tags:
        - Article
      summary: 記事閲覧
      description: 記事1件の詳細情報を取得する。
      parameters:
        - name: articleId
          in: path
          required: true
          schema:
            type: string
            description: 記事ID
            example: "1"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/articlesGetResponse"
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response400"
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response500"

components:
  schemas:
    signupRequest:
      type: object
      description: ユーザー登録リクエスト
      required:
        - userId
        - password
        - name
      properties:
        userId:
          type: string
          description: ユーザーID
          example: userId
        password:
          type: string
          description: パスワード
          example: password
        name:
          type: string
          description: ニックネーム
          example: ニックネーム

    signupResponse:
      type: object
      description: ユーザー登録レスポンス
      required:
        - userId
        - name
        - createdAt
      properties:
        userId:
          type: string
          description: ユーザーID
          example: userId
        name:
          type: string
          description: ニックネーム
          example: ニックネーム
        createdAt:
          type: string
          description: 作成日時
          example: "2022-01-01T00:00:00+09:00"

    loginRequest:
      type: object
      description: ログインリクエスト
      required:
        - userId
        - password
      properties:
        userId:
          type: string
          description: ユーザーID
          example: userId
        password:
          type: string
          description: パスワード
          example: password

    loginResponse:
      type: object
      description: ログインレスポンス
      required:
        - userId
        - name
        - createdAt
      properties:
        userId:
          type: string
          description: ユーザーID
          example: userId
        name:
          type: string
          description: ニックネーム
          example: ニックネーム
        createdAt:
          type: string
          description: 作成日時
          example: "2022-01-01T00:00:00+09:00"

    articlesListGetResponse:
      type: object
      description: 記事一覧取得レスポンス
      properties:
        threads:
          type: array
          description: 記事一覧
          items:
            type: object
            description: 記事
            required:
              - articleId
              - articleTitle
              - createdAt
              - updatedAt
            properties:
              articleId:
                type: string
                description: 記事ID
                example: "1"
              articleTitle:
                type: string
                description: 記事名
                example: 記事名
              createdAt:
                type: string
                description: 作成日時
                format: date-time
                example: "2022-01-01T00:00:00+09:00"
              updatedAt:
                type: string
                description: 更新日時
                format: date-time
                example: "2022-01-01T00:00:00+09:00"
        pagination:
          type: object
          description: ページネーション情報
          required:
            - page
            - perPage
            - total
          properties:
            page:
              type: integer
              description: ページ番号
              example: 1
            perPage:
              type: integer
              description: 1ページあたりの件数
              example: 20
            total:
              type: integer
              description: 総件数
              example: 99

    articlesPostRequest:
      type: object
      properties:
        articleTitle:
          type: string
          description: 記事タイトル
          format: varchar(100)
          example: 記事タイトル
        content:
          type: string
          description: コンテンツ
          example: コンテンツ
        userId:
          type: string
          description: ユーザーID
          example: userId

    articlesPostResponse:
      type: object
      properties:
        articleId:
          type: string
          description: 記事ID
          example: "1"
        articleTitle:
          type: string
          description: 記事タイトル
          format: varchar(100)
          example: 記事タイトル
        content:
          type: string
          description: コンテンツ
          example: コンテンツ
        createdAt:
          type: string
          description: 作成日時
          format: date-time
          example: "2022-01-01T00:00:00+09:00"
        updatedAt:
          type: string
          description: 更新日時
          format: date-time
          example: "2022-01-01T00:00:00+09:00"
        userId:
          type: string
          description: ユーザーID
          example: userId
        userName:
          type: string
          description: ニックネーム
          example: ニックネーム

    articlesGetResponse:
      type: object
      description: 記事取得レスポンス
      required:
        - articleId
        - articleTitle
        - content
      properties:
        articleId:
          type: string
          description: 記事ID
          example: "1"
        articleTitle:
          type: string
          description: 記事タイトル
          format: varchar(100)
          example: 記事タイトル
        content:
          type: string
          description: コンテンツ
          example: コンテンツ
      type: object
      properties:
        pageNumber:
          type: integer
          format: integer(100)
          example: 1
        perPage:
          type: integer
          format: integer(100)
          example: 10

    articlePostResponse:
      type: object
      properties:
        articleId:
          type: integer
          format: integer(100)
          example: 1
        articleName:
          type: string
          format: varchar(100)
          example: artice_name
        createdAt:
          type: string
          format: date-time
          example: "2017-01-01 12:00:00"
        updatedAt:
          type: string
          format: date-time
          example: "2017-01-01 12:00:00"
        pageNumber:
          type: integer
          format: integer(100)
          example: 1
        perPage:
          type: integer
          format: integer(100)
          example: 10
        totalNumber:
          type: integer
          format: integer(100)
          example: 10

    Response400:
      type: object
      description: 400エラーレスポンス
      properties:
        message:
          type: string
          description: メッセージ
          example: メッセージ

    Response401:
      type: object
      description: 401エラーレスポンス
      properties:
        message:
          type: string
          description: メッセージ
          example: メッセージ

    Response404:
      type: object
      description: 404エラーレスポンス
      properties:
        message:
          type: string
          description: メッセージ
          example: メッセージ

    Response422:
      type: object
      description: 422エラーレスポンス
      properties:
        message:
          type: string
          description: メッセージ
          example: メッセージ
        errors:
          type: object
          description: エラー内容
          properties:
            propertyName:
              type: string
              description: プロパティ名
              example: xxxxを入力してください。

    Response500:
      type: object
      description: 500エラーレスポンス
      properties:
        message:
          type: string
          description: メッセージ
          example: メッセージ
